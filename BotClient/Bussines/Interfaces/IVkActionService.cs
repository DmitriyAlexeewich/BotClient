using BotClient.Models.Bot;
using BotClient.Models.Bot.Enumerators;
using BotClient.Models.Bot.Work;
using BotClient.Models.Bot.Work.Enumerators;
using BotClient.Models.Client;
using BotClient.Models.HTMLElements;
using BotDataModels.Bot;
using BotDataModels.Client;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace BotClient.Bussines.Interfaces
{
    public interface IVkActionService
    {
        Task<AlgoritmResult> Login(Guid WebDriverId, string Username, string Password);
        Task<bool> isLoginSuccess(Guid WebDriverId);
        Task<AlgoritmResult> Customize(Guid WebDriverId, BotCustomizeModel CustomizeData);
        Task<AlgoritmResult> GoToMusicPage(Guid WebDriverId);
        Task<BotMusicModel> GetFirstMusic(Guid WebDriverId);
        Task<BotMusicModel> GetNextMusic(Guid WebDriverId);
        Task<AlgoritmResult> StopMusic(Guid WebDriverId);
        Task<AlgoritmResult> AddMusic(Guid WebDriverId);
        Task PlayAddedMusic(Guid WebDriverId);
        Task<AlgoritmResult> WatchVideo(Guid WebDriverId);
        Task<bool> SubscribeByVideo(Guid WebDriver);
        Task<bool> AddVideo(Guid WebDriver);
        Task<bool> GoToProfile(Guid WebDriverId, string Link);
        Task<AlgoritmResult> GoToVideoCatalog(Guid WebDriverId);
        Task<AlgoritmResult> FindVideo(Guid WebDriverId, string SearchWord);
        Task<List<BotVkVideo>> GetVideos(Guid WebDriverId);
        Task<AlgoritmResult> ClickVideo(Guid WebDriverId, WebHTMLElement Element);
        Task<AlgoritmResult> CloseVideo(Guid WebDriverId);
        Task<AlgoritmResult> GoToNewsPage(Guid WebDriverId);
        Task<List<BotVkNews>> GetNews(Guid WebDriverId);
        Task<AlgoritmResult> AvatarLike(Guid WebDriverId);
        Task<AlgoritmResult> NewsLike(Guid WebDriverId, EnumNewsLikeType NewsLikeType);
        Task<AlgoritmResult> Subscribe(Guid WebDriverId);
        Task<AlgoritmResult> SubscribeToGroup(Guid WebDriverId);
        Task<AlgoritmResult> SubscribeToGroup(Guid WebDriverId, string GroupURL, string GroupName);
        Task<AlgoritmResult> SubscribeToGroup(Guid WebDriverId, WebHTMLElement GroupElement);
        Task<AlgoritmResult> GoToGroup(Guid WebDriverId, string GroupURL);
        Task<AlgoritmResult> GoToGroupsSection(Guid WebDriverId);
        Task<AlgoritmResult> SearchGroups(Guid WebDriverId, string KeyWord, bool FilteredBySubscribersCount, EnumSearchGroupType SearchGroupType, string Country, string City, bool isSaftySearch);
        Task<List<ParsedGroupModel>> GetGroups(Guid WebDriverId);
        Task<List<PlatformPostModel>> GetPosts(Guid WebDriverId);
        Task<AlgoritmResult> Repost(Guid WebDriverId, EnumRepostType RepostType);
        Task<bool> RepostPostToSelfPage(Guid WebDriverId, string VkId);
        Task<bool> LikePostNewsComment(Guid WebDriver, string CommentId);
        Task<AlgoritmResult> SendFirstMessage(Guid WebDriverId, string MessageText, int RoleId, int DialogId, bool? isSecond = false);
        Task<AlgoritmResult> CheckIsSended(Guid WebDriverId, string ClientVkId, int RoleId, int DialogId, bool isMarked);
        Task<AlgoritmResult> GoToDialog(Guid WebDriverId, string ClientVkId);
        Task<List<DialogWithNewMessagesModel>> GetDialogsWithNewMessages(Guid WebDriverId);
        Task CloseDialog(Guid WebDriverId);
        Task<List<NewMessageModel>> GetNewMessagesInDialog(Guid WebDriverId, string ClientVkId);
        Task<bool> isBotDialogBlocked(Guid WebDriver);
        Task<AlgoritmResult> SendAnswerMessage(Guid WebDriverId, string MessageText, string ClientVkId, int BotClientRoleConnectorId);
        Task<bool> Logout(Guid WebDriverId);
        Task<string> GetClientName(Guid WebDriverId);
        Task<bool> hasCaptcha(Guid WebDriverId);
        Task<string> GetVkId(Guid WebDriverId);
        Task<AlgoritmResult> GoToSelfPage(Guid WebDriverId);
        Task<AlgoritmResult> GoToSettings(Guid WebDriverId);
        Task<AlgoritmResult> ChangePassword(Guid WebDriverId, string OldPassword, string NewPassword);
        Task<string> GetPageName(Guid WebDriverId);
        Task<bool> GetCanRecievedMessage(Guid WebDriverId);
        Task<List<ParsedClientCreateModel>> GetContacts(Guid WebDriverId);
        Task<int> GetNewDialogsCount(Guid WebDriverId);
        Task<bool> hasChatBlock(Guid WebDriverId);
        Task<List<ParsedGroupModel>> GetClientGroups(Guid WebDriverId, string ClientVkId);
        Task<bool> GoToClientGroups(Guid WebDriverId, string ClientVkId);
        Task<bool> GoToAudioPageByLink(Guid WebDriverId, string Link);
        Task<List<ParsedAudioModel>> ParseAudio(Guid WebDriverId);
        Task<bool> AddAudioToSelfPage(Guid WebDriverId, WebHTMLElement Audio);
        Task<bool> GoToDocsPageByLink(Guid WebDriverId, string Link);
        Task<List<DocumentCreateModel>> ParseDocs(Guid WebDriverId);
        Task<bool> GoToGroupByVkId(Guid WebDriverId, string VkId);
        Task<bool> GoToVideoPageByLink(Guid WebDriverId, string Link);
        Task<List<ParsedVideoModel>> ParseVideos(Guid WebDriverId);
        Task<bool> AddVideoToSelfPage(WebHTMLElement Video);
        Task<string> GoToNewsByLink(Guid WebDriverId, string VkLink);
        Task<WebHTMLElement> GetNewsPostInput(Guid WebDriverId, string NewsPostVkId);
        Task<WebHTMLElement> GetNewsPostSendButton(Guid WebDriverId, string NewsPostVkId);
        Task<List<BotVkNewsPostCommentModel>> GetNewsPostComments(Guid WebDriverId, string NewsPostVkId);
        Task<bool> SendMessageToPostNews(Guid WebDriverId, string VkId, string Text);
        Task<bool> LikePostNews(Guid WebDriverId, string VkId);
        Task<bool> CreatePostNews(Guid WebDriverId, string Text);
    }
}
